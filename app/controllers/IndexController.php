<?php

namespace Application\Controllers;

// use Application\Core\User;
use Phalcon\Mvc\View;
use Application\Models\Customer;

class IndexController extends ControllerBase 
{
	public function beforeExecuteRoute($dispatcher)
    {
        parent::beforeExecuteRoute($dispatcher); // TODO: Change the autogenerated stub
    }
    
    public function indexAction()
    {
        $this->view->title = "Phalcon - Index";
    }

    public function listAction()
    {
        $customers = Customer::find();
        $this->view->title = "Phalcon - Customers List";
        $this->view->customers = $customers;
        // dd($customers);
    }

    public function showAction($custId)
    {
        $conditions = ['custId'=>$custId];
        $customer = Customer::findFirst([
            'conditions' => 'id=:custId:',
            'bind' => $conditions,
        ]);

        $this->view->title = "Phalcon - Customer Detail";
        $this->view->customer = $customer;
        // dd($customer);
    }

    public function createAction()
    {
        $this->view->title = "Phalcon - Create Customer";
    }

    public function storeAction()
    {
        $name = $this->request->get('name');
        $email = $this->request->get('email');
        $address = $this->request->get('address');

        $customer = new Customer();
        $customer->name = $name;
        $customer->email = $email;
        $customer->address = $address;

        if ($this->request->isPost()) {
            if ($customer->create()) {
                return $this->response->redirect('customer');
            }
        } else {
            $this->flash->error('User form is not valid.');
        }
    }

    public function editAction($custId)
    {
        $customer = $this->findCustomer($custId);
        $this->view->title = "Phalcon - Update Customer";
        $this->view->customer = $customer;
    }

    public function saveAction($custId)
    {
        $customer = $this->findCustomer($custId);

        $name = $this->request->get('name');
        $email = $this->request->get('email');
        $address = $this->request->get('address');

        $customer->name = $name;
        $customer->email = $email;
        $customer->address = $address;

        if ($customer->save()) {
            return $this->response->redirect('customer');
        } else {
            $messages = $customer->getMessages();
            foreach ($messages as $message) {
                $this->flash->error($message);
            }
        }
    }

    public function deleteAction($custId)
    {
        $customer = $this->findCustomer($custId);
        
        if ($customer->delete() === false) {
            $messages = $customer->getMessages();
            foreach ($messages as $message) {
                $this->flash->error($message);
            }
        } else {
            return $this->response->redirect('customer');
        }
    }

    public function findCustomer($custId)
    {
        $conditions = ['custId'=>$custId];
        return Customer::findFirst([
            'conditions' => 'id=:custId:',
            'bind' => $conditions,
        ]);
    }
}
